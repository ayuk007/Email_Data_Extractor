import logging
import traceback
from db_manage import Manage_DB

# Configure logging
logger = logging.getLogger('app_logger')
logger.setLevel(logging.INFO)

# Create a file handler for the log file
file_handler = logging.FileHandler('app.log')
formatter = logging.Formatter('%(asctime)s - %(levelname)s - %(message)s - %(filename)s:%(lineno)d')
file_handler.setFormatter(formatter)

# Add the file handler to the logger
logger.addHandler(file_handler)

# Initialize the database manager
db_manager = Manage_DB()

# Your FastAPI endpoints...

@app.post("/uploadfile/")
async def create_upload_file(file: UploadFile = File(...)):
    try:
        # Your upload file logic...
        logger.info(f"File '{file.filename}' uploaded successfully.")
    except Exception as e:
        # Log error with file name and line number
        logger.error(f"Error in create_upload_file: {e}\n{traceback.format_exc()}")
        return JSONResponse(content={"error": "Internal Server Error"}, status_code=500)

@app.post("/add_record/")
async def add_record(file: UploadFile = File(...), approval: str = Form(...), pdfData: str = Form(...)):
    try:
        # Your add record logic...
        logger.info(f"Record added successfully for file '{file.filename}'.")
    except Exception as e:
        # Log error with file name and line number
        logger.error(f"Error in add_record: {e}\n{traceback.format_exc()}")
        return JSONResponse(content={"error": "Internal Server Error"}, status_code=500)

@app.post("/get_records/")
async def get_records(data: Query_Dict):
    try:
        # Your get records logic...
        logger.info("Records retrieved successfully.")
    except Exception as e:
        # Log error with file name and line number
        logger.error(f"Error in get_records: {e}\n{traceback.format_exc()}")
        return JSONResponse(content={"error": "Internal Server Error"}, status_code=500)

@app.post("/your_db_operation_endpoint/")
async def your_db_operation_endpoint():
    try:
        # Call a method from Manage_DB class here
        db_manager.your_method()
        logger.info("Database operation successful.")
    except Exception as e:
        # Log error with file name and line number
        logger.error(f"Error in your_db_operation_endpoint: {e}\n{traceback.format_exc()}")
        return JSONResponse(content={"error": "Internal Server Error"}, status_code=500)




import React, { useState, useEffect } from "react";
import "../style.css";
import { addRecord, getQueryTable } from "../service";

function PdfDisplay({
  pdfData,
  setPdfData,
  approval,
  setApproval,
  selectedFile,
}) {
  const [editablePdfData, setEditablePdfData] = useState(pdfData);
  const [buttonDisabled, setButtonDisabled] = useState(false);
  const [queryRecords, setQueryRecords] = useState(null);
  const [queryButtonDisabled, setQueryButtonDisabled] = useState(false);
  const [selectedRows, setSelectedRows] = useState([]);

  useEffect(() => {
    setEditablePdfData(pdfData);
    setQueryRecords(null);
    setQueryButtonDisabled(false);
    setSelectedRows([]);
  }, [pdfData]);

  const handleApprovalChange = (event) => {
    setApproval(event.target.value);
  };

  const handleValueChange = (key, newValue) => {
    setEditablePdfData((prevData) => ({
      ...prevData,
      [key]: newValue,
    }));
    setQueryButtonDisabled(false);
    setQueryRecords(null);
  };

  const handleRowCheckboxChange = (rowIndex) => {
    setSelectedRows((prevSelectedRows) => {
      if (prevSelectedRows.includes(rowIndex)) {
        return prevSelectedRows.filter((index) => index !== rowIndex);
      } else {
        return [...prevSelectedRows, rowIndex];
      }
    });
  };

  const refreshPage = () => {
    window.location.reload(false);
  };

  const handleSubmit = async () => {
    try {
      const selectedData = selectedRows.map((rowIndex) => {
        const rowData = {};
        Object.keys(pdfData).forEach((key) => {
          rowData[key] = pdfData[key][rowIndex];
        });
        return rowData;
      });

      if (approval && selectedFile) {
        setButtonDisabled(true);
        const response = await addRecord(selectedFile, approval, selectedData);

        if (response.status_code === 200) {
          alert("Data Uploaded Successfully!!");
          refreshPage();
        }
      }
    } catch (error) {
      console.error("Error submitting:", error);
    }
  };

  const handleSaveChanges = () => {
    const updatedPdfData = { ...pdfData, ...editablePdfData };

    setPdfData(updatedPdfData);
    pdfData = updatedPdfData;
  };

  const handleGetRecords = async () => {
    try {
      handleSaveChanges();
      const response = await getQueryTable(pdfData);

      if (response.status_code === 303) {
        alert(response.Message);
      } else {
        console.log(response.USER_ID);
        setQueryRecords(response);
      }
    } catch (error) {
      console.log(error);
    }
  };

  const renderTable = () => {
    return (
      <div className="tables">
        <div className="pdf-table-container">
          <table className="pdf-table">
            <thead>
              <tr>
                <th>Key</th>
                <th>Value</th>
                <th>Select</th> {/* Added checkbox column */}
              </tr>
            </thead>
            <tbody>
              {Object.entries(editablePdfData).map(([key, value], index) => (
                <tr key={key}>
                  <td className="pdf-key">{key}</td>
                  <td className="table-value">
                    <input
                      style={{ width: "80%" }}
                      type="text"
                      value={value}
                      onChange={(e) => handleValueChange(key, e.target.value)}
                    />
                  </td>
                  <td>
                    <input
                      type="checkbox"
                      checked={selectedRows.includes(index)}
                      onChange={() => handleRowCheckboxChange(index)}
                    />
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        <div className="approveDiv">
          {queryRecords && (
            <div className="approve">
              <label style={{ margin: "10px", padding: "10px" }}>
                <input
                  type="radio"
                  value="GE"
                  checked={approval === "GE"}
                  onChange={handleApprovalChange}
                />
                GE
              </label>
              <label style={{ margin: "10px", padding: "10px" }}>
                <input
                  type="radio"
                  value="NGE"
                  checked={approval === "NGE"}
                  onChange={handleApprovalChange}
                />
                NGE
              </label>
            </div>
          )}
        </div>
      </div>
    );
  };

  return (
    <div>
      {renderTable()}
      <div>
        {pdfData && (
          <div
            style={{
              display: "flex",
              justifyContent: "center",
              margin: "10px",
              padding: "30px",
            }}
          >
            <br />
            {!queryRecords && (
              <button
                hidden={queryButtonDisabled}
                onClick={() => {
                  handleGetRecords();
                  // setQueryButton(true);
                }}
              >
                GET USERS
              </button>
            )}

            {approval && (
              <button
                className="button"
                disabled={buttonDisabled}
                onClick={() => {
                  handleSaveChanges();
                  handleSubmit();
                }}
              >
                Submit
              </button>
            )}
          </div>
        )}
      </div>
    </div>
  );
}

export default PdfDisplay;
