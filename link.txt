https://nagasudhir.blogspot.com/2022/01/cxoracle-python-module-for-oracle.html?m=1

def create_record(self, table_name, record_dict):
    domain_name = record_dict.get('domain_name', None)
    usage_flag = record_dict.get('usage_flag', False)

    # Check if there is an existing record with the same domain name and usage_flag = true
    existing_record_query = f"SELECT * FROM {table_name} WHERE domain_name = %s AND usage_flag = TRUE"
    existing_record_values = (domain_name,)

    try:
        self.cursor.execute(existing_record_query, existing_record_values)
        existing_record = self.cursor.fetchone()

        if existing_record:
            # Update existing record's usage_flag to false
            update_query = f"UPDATE {table_name} SET usage_flag = FALSE WHERE id = %s"
            self.execute_query(update_query, (existing_record[0],))

    except (Exception, Error) as err:
        print(f"Error checking existing record: {err}")

    # Insert the new record
    columns = ', '.join(record_dict.keys())
    placeholders = ', '.join(['%s'] * len(record_dict))
    insert_query = f"INSERT INTO {table_name} ({columns}) VALUES ({placeholders})"
    
    try:
        self.execute_query(insert_query, tuple(record_dict.values()))
        print("Record created successfully!")

    except (Exception, Error) as err:
        print(f"Error inserting record: {err}")


// App.js
import React, { useState } from 'react';
import FileInput from './components/FileInput';
import PdfDisplay from './components/PdfDisplay';
import { uploadFile, addRecord } from './service';

function App() {
  const [selectedFile, setSelectedFile] = useState(null);
  const [pdfData, setPdfData] = useState(null);
  const [approval, setApproval] = useState(null);
  const [tableData, setTableData] = useState([]); // State to store table data

  const handleFileChange = (file, data) => {
    setSelectedFile(file);
    setPdfData(data);
    setApproval(null);
  };

  const handleFileUpload = async () => {
    try {
      if (selectedFile) {
        const response = await uploadFile(selectedFile, pdfData);
        setPdfData(response.data);
        setApproval(null);
      }
    } catch (error) {
      console.error('Error uploading file:', error);
    }
  };

  const handleApprovalChange = (event) => {
    setApproval(event.target.value);
  };

  const handleEdit = (rowIndex, columnIndex, value) => {
    // Update the value in the copied table data
    const updatedData = [...tableData];
    updatedData[rowIndex][columnIndex] = value;
    setTableData(updatedData);
  };

  const handleSubmit = async () => {
    try {
      if (approval && selectedFile) {
        // Add the record to the database
        await addRecord(selectedFile, approval, pdfData);
        // Log the approval status to the console
        console.log(`File approval status: ${approval}`);
      }
    } catch (error) {
      console.error('Error submitting:', error);
    }
  };

  const handleTableSubmit = async () => {
    try {
      // Send the edited table data to the backend
      // Implement your logic to send the data to FastAPI
      console.log('Edited table data:', tableData);
    } catch (error) {
      console.error('Error submitting table data:', error);
    }
  };

  return (
    <div>
      <h1>PDF Reader App</h1>
      <FileInput onFileChange={handleFileChange} onFileUpload={handleFileUpload} />
      {pdfData && <PdfDisplay pdfData={pdfData} />}
      {pdfData && (
        <div>
          <h2>Approve:</h2>
          <label>
            <input
              type="radio"
              value="GE"
              checked={approval === 'GE'}
              onChange={handleApprovalChange}
            />
            GE
          </label>
          <label>
            <input
              type="radio"
              value="NGE"
              checked={approval === 'NGE'}
              onChange={handleApprovalChange}
            />
            NGE
          </label>
          <br />
          <button onClick={handleSubmit}>Submit</button>
        </div>
      )}

      {/* Simple editable table */}
      <div>
        <h2>Editable Table</h2>
        <table>
          <thead>
            <tr>
              <th>Column 1</th>
              <th>Column 2</th>
              {/* Add more table headers as needed */}
            </tr>
          </thead>
          <tbody>
            {tableData.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {row.map((cell, columnIndex) => (
                  <td key={columnIndex}>
                    <input
                      type="text"
                      value={tableData[rowIndex][columnIndex]}
                      onChange={(e) => handleEdit(rowIndex, columnIndex, e.target.value)}
                    />
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
        <button onClick={handleTableSubmit}>Submit Table Data</button>
      </div>
    </div>
  );
}

export default App;




import sqlite3
import io
import PyPDF2
import fitz
from PIL import Image

# Function to convert PDF to image
def pdf_to_image(pdf_path):
    images = []
    pdf_document = fitz.open(pdf_path)
    for page_num in range(len(pdf_document)):
        page = pdf_document.load_page(page_num)
        image = page.get_pixmap()
        img_bytes = io.BytesIO(image.get_png_data())
        img = Image.open(img_bytes)
        images.append(img)
    return images

# Function to save images to SQLite database
def save_images_to_db(images, db_name='pdf_images.db'):
    conn = sqlite3.connect(db_name)
    cursor = conn.cursor()

    # Create table if not exists
    cursor.execute('''CREATE TABLE IF NOT EXISTS pdf_images
                      (id INTEGER PRIMARY KEY, image BLOB)''')

    # Insert images into the database
    for image in images:
        img_byte_arr = io.BytesIO()
        image.save(img_byte_arr, format='PNG')
        img_byte_arr = img_byte_arr.getvalue()
        cursor.execute("INSERT INTO pdf_images (image) VALUES (?)", (sqlite3.Binary(img_byte_arr),))

    # Commit changes and close connection
    conn.commit()
    conn.close()

# Main function
def main(pdf_path):
    images = pdf_to_image(pdf_path)
    save_images_to_db(images)

if __name__ == "__main__":
    pdf_path = "example.pdf"  # Change this to your PDF file path
    main(pdf_path)
